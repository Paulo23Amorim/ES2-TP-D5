@page "/ativos"
@attribute [Authorize]

@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Projeto_ES2.Client.Components.Models
@using System.Net.Http.Json
@using Projeto_ES2.Client.Components.DTOs
@using Projeto_ES2.Client.Services

@inject HttpClientService HttpService
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthStateProvider

<AuthorizeView Context="mainAuth">
    <Authorized Context="mainContent">
        <div class="container mt-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h3>Gestão de Ativos Financeiros</h3>

                <AuthorizeView Context="managerAuth">
                    <Authorized Context="managerContent">
                        <button class="btn btn-primary" @onclick="OpenCreateModal">
                            <i class="bi bi-plus-circle"></i> Novo Ativo
                        </button>
                    </Authorized>
                </AuthorizeView>
            </div>

            <div class="d-flex mb-3">
                <InputText class="form-control" @bind-Value="filtroNome" placeholder="Pesquisar por nome" />
                <InputNumber @bind-Value="filtroMontanteMin" class="form-control me-2" placeholder="Montante Mínimo" />
                <InputNumber @bind-Value="filtroMontanteMax" class="form-control me-2" placeholder="Montante Máximo" />
                <InputSelect class="form-select" @bind-Value="filtroTipo">
                    <option value="">Todos os Tipos</option>
                    <option value="@TipoAtivoFinanceiro.DepositoPrazo">Depósito a Prazo</option>
                    <option value="@TipoAtivoFinanceiro.FundoInvestimento">Fundo de Investimento</option>
                    <option value="@TipoAtivoFinanceiro.ImovelArrendado">Imóvel Arrendado</option>
                </InputSelect>
                <button class="btn btn-primary" @onclick="AplicarFiltros">Filtrar</button>
            </div>


            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Carregando...</span>
                    </div>
                </div>
            }
            else if (ativos?.Any() ?? false)
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Nome</th>
                                <th>Tipo</th>
                                <th>Data Início</th>
                                <th>Valor</th>
                                <AuthorizeView Roles="Admin">
                                    <th>Dono</th>
                                </AuthorizeView>
                                <th>Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var ativo in ativosFiltrados)
                            {
                                <tr>
                                    <td>@ativo.Nome</td>
                                    <td>@GetTipoAtivoDisplay(ativo.Tipo)</td>
                                    <td>@ativo.DataInicio.ToShortDateString()</td>
                                    <td>@GetValorAtivo(ativo)</td>
                                    <AuthorizeView Roles="Admin">
                                        <td>@ativo.Utilizador?.nome (@ativo.Utilizador?.email)</td>
                                    </AuthorizeView>

                                    <td>
                                        <button class="btn btn-sm btn-info me-2" @onclick="() => ShowDetails(ativo.Id)">
                                            <i class="bi bi-eye"></i> Detalhes
                                        </button>

                                        <AuthorizeView Roles="Admin,Utilizador" Context="editAuth">
                                            <Authorized Context="editContent">
                                                <button class="btn btn-sm btn-warning me-2" @onclick="() => EditarAtivo(ativo.Id)">
                                                    <i class="bi bi-pencil"></i> Editar
                                                </button>
                                            </Authorized>
                                        </AuthorizeView>

                                        <AuthorizeView Roles="Admin" Context="deleteAuth">
                                            <Authorized Context="deleteContent">
                                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteAtivoFinanceiro(ativo.Id)">
                                                    <i class="bi bi-trash"></i> Excluir
                                                </button>
                                            </Authorized>
                                        </AuthorizeView>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    Nenhum ativo financeiro cadastrado.
                </div>
            }
        </div>

        <!-- Modal de Criação -->
        @if (showCreateModal)
        {
            <div class="modal show d-block" style="background-color: rgba(0,0,0,0.5)">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Adicionar Novo Ativo</h5>
                            <button type="button" class="btn-close" @onclick="CloseModal"></button>
                        </div>
                        <div class="modal-body">
                            <EditForm Model="NovoAtivo" OnValidSubmit="CreateAtivoFinanceiro">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="mb-3">
                                    <label class="form-label">Nome:</label>
                                    <InputText class="form-control" @bind-Value="NovoAtivo.Nome" />
                                    <ValidationMessage For="@(() => NovoAtivo.Nome)" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Tipo:</label>
                                    <InputSelect class="form-select" @bind-Value="NovoAtivo.Tipo">
                                        <option value="@TipoAtivoFinanceiro.DepositoPrazo">Depósito a Prazo</option>
                                        <option value="@TipoAtivoFinanceiro.FundoInvestimento">Fundo de Investimento</option>
                                        <option value="@TipoAtivoFinanceiro.ImovelArrendado">Imóvel Arrendado</option>
                                    </InputSelect>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Data Início:</label>
                                    <InputDate class="form-control" @bind-Value="NovoAtivo.DataInicio" />
                                </div>

                                <!-- Campos específicos por tipo de ativo -->
                                @if (NovoAtivo.Tipo == TipoAtivoFinanceiro.DepositoPrazo)
                                {
                                    <div class="border p-3 mb-3">
                                        <h5>Dados do Depósito</h5>
                                        <div class="mb-3">
                                            <label class="form-label">Valor Inicial:</label>
                                            <InputNumber class="form-control" @bind-Value="NovoAtivo.Deposito.ValorInicial" />
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Banco:</label>
                                            <InputText class="form-control" @bind-Value="NovoAtivo.Deposito.Banco" />
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Taxa de Juro Anual (%):</label>
                                            <InputNumber class="form-control" @bind-Value="NovoAtivo.Deposito.TaxaJuroAnual" step="0.01" />
                                        </div>
                                    </div>
                                }
                                else if (NovoAtivo.Tipo == TipoAtivoFinanceiro.FundoInvestimento)
                                {
                                    <div class="border p-3 mb-3">
                                        <h5>Dados do Fundo</h5>
                                        <div class="mb-3">
                                            <label class="form-label">Montante Investido:</label>
                                            <InputNumber class="form-control" @bind-Value="NovoAtivo.Fundo.MontanteInvestido" />
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Taxa de Juro Padrão (%):</label>
                                            <InputNumber class="form-control" @bind-Value="NovoAtivo.Fundo.TaxaJuroPadrao" step="0.01" />
                                        </div>
                                    </div>
                                }
                                else if (NovoAtivo.Tipo == TipoAtivoFinanceiro.ImovelArrendado)
                                {
                                    <div class="border p-3 mb-3">
                                        <h5>Dados do Imóvel</h5>
                                        <div class="mb-3">
                                            <label class="form-label">Localização:</label>
                                            <InputText class="form-control" @bind-Value="NovoAtivo.Imovel.Localizacao" />
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Valor do Imóvel:</label>
                                            <InputNumber class="form-control" @bind-Value="NovoAtivo.Imovel.ValorImovel" />
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Valor da Renda:</label>
                                            <InputNumber class="form-control" @bind-Value="NovoAtivo.Imovel.ValorRenda" />
                                        </div>
                                    </div>
                                }

                                <div class="modal-footer mt-3">
                                    <button type="submit" class="btn btn-primary">
                                        <i class="bi bi-save"></i> Salvar
                                    </button>
                                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                                        <i class="bi bi-x-circle"></i> Cancelar
                                    </button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        }

        @if (showEditModal)
        {
        <div class="modal show d-block" style="background-color: rgba(0,0,0,0.5)">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Editar Ativo</h5>
                        <button type="button" class="btn-close" @onclick="() => showEditModal = false"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="AtivoEmEdicao" OnValidSubmit="GuardarEdicaoAsync">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label>Nome:</label>
                                <InputText class="form-control" @bind-Value="AtivoEmEdicao.Nome" />
                            </div>

                            <div class="mb-3">
                                <label>Data Fim:</label>
                                <InputDate class="form-control" @bind-Value="AtivoEmEdicao.DataFim" />
                            </div>

                            @if (AtivoEmEdicao.Tipo == TipoAtivoFinanceiro.FundoInvestimento)
                            {
                            <div class="border p-3">
                                <h6>Fundo de Investimento</h6>
                                <label>Montante Investido:</label>
                                <InputNumber class="form-control" @bind-Value="AtivoEmEdicao.FundoInvestimento.MontanteInvestido" />

                                <label>Taxa de Juro Padrão:</label>
                                <InputNumber class="form-control" step="0.01" @bind-Value="AtivoEmEdicao.FundoInvestimento.TaxaJuroPadrao" />
                            </div>
                            }
                            else if (AtivoEmEdicao.Tipo == TipoAtivoFinanceiro.DepositoPrazo)
                            {
                            <div class="border p-3">
                                <h6>Depósito a Prazo</h6>
                                <label>Valor Inicial:</label>
                                <InputNumber class="form-control" @bind-Value="AtivoEmEdicao.DepositoPrazo.ValorInicial" />

                                <label>Banco:</label>
                                <InputText class="form-control" @bind-Value="AtivoEmEdicao.DepositoPrazo.Banco" />

                                <label>Taxa Juro Anual:</label>
                                <InputNumber class="form-control" step="0.01" @bind-Value="AtivoEmEdicao.DepositoPrazo.TaxaJuroAnual" />
                            </div>
                            }
                            else if (AtivoEmEdicao.Tipo == TipoAtivoFinanceiro.ImovelArrendado)
                            {
                            <div class="border p-3">
                                <h6>Imóvel Arrendado</h6>
                                <label>Localização:</label>
                                <InputText class="form-control" @bind-Value="AtivoEmEdicao.ImovelArrendado.Localizacao" />

                                <label>Valor Imóvel:</label>
                                <InputNumber class="form-control" @bind-Value="AtivoEmEdicao.ImovelArrendado.ValorImovel" />

                                <label>Valor da Renda:</label>
                                <InputNumber class="form-control" @bind-Value="AtivoEmEdicao.ImovelArrendado.ValorRenda" />
                            </div>
                            }

                            <div class="modal-footer mt-3">
                                <button type="submit" class="btn btn-success">Guardar</button>
                                <button type="button" class="btn btn-secondary" @onclick="() => showEditModal = false">Cancelar</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        }

    </Authorized>
    <NotAuthorized>
        <div class="alert alert-warning mt-5 text-center">
            <h4>Acesso não autorizado</h4>
            <p>Você precisa estar autenticado para acessar esta página.</p>
            <a href="/login" class="btn btn-primary">Ir para Login</a>
        </div>
    </NotAuthorized>
</AuthorizeView>
@code {
    private List<AtivoFinanceiroDTO> ativos = new();
    private bool isLoading = true;
    private bool showCreateModal = false;

    private string filtroNome = string.Empty;
    private decimal? filtroMontanteMin;
    private decimal? filtroMontanteMax;
    private TipoAtivoFinanceiro? filtroTipo = null;

    private List<AtivoFinanceiroDTO> ativosFiltrados = new();
    
    private void AplicarFiltros()
    {
        ativosFiltrados = ativos
            .Where(a => string.IsNullOrWhiteSpace(filtroNome) || a.Nome.Contains(filtroNome, StringComparison.OrdinalIgnoreCase))
            .Where(a => !filtroTipo.HasValue || a.Tipo == filtroTipo)
            .Where(a =>
                (
                    a.Tipo == TipoAtivoFinanceiro.FundoInvestimento &&
                    a.FundoInvestimento != null &&
                    (!filtroMontanteMin.HasValue || a.FundoInvestimento.MontanteInvestido >= filtroMontanteMin) &&
                    (!filtroMontanteMax.HasValue || a.FundoInvestimento.MontanteInvestido <= filtroMontanteMax)
                )
                ||
                (
                    a.Tipo == TipoAtivoFinanceiro.DepositoPrazo &&
                    a.DepositoPrazo != null &&
                    (!filtroMontanteMin.HasValue || a.DepositoPrazo.ValorInicial >= filtroMontanteMin) &&
                    (!filtroMontanteMax.HasValue || a.DepositoPrazo.ValorInicial <= filtroMontanteMax)
                )
                ||
                (
                    a.Tipo == TipoAtivoFinanceiro.ImovelArrendado
                )
            )
            .ToList();
    }
    
    private AtivoFinanceiroNovoDTO NovoAtivo = new()
    {
        Deposito = new DepositoPrazoDTO { Titulares = "Titular Principal" },
        Fundo = new FundoInvestimentoDTO(),
        Imovel = new ImovelArrendadoDTO(),
        DataInicio = DateTime.Today
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadAtivos();
        AplicarFiltros();
    }

    private async Task LoadAtivos()
    {
        isLoading = true;
        StateHasChanged(); 
    
        try
        {
            var response = await HttpService.SendAuthorizedRequestAsync(
                HttpMethod.Get, "api/AtivoFinanceiro");

            if (response != null && response.IsSuccessStatusCode)
            {
                // Capturar a resposta bruta para diagnóstico
                var responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Resposta da API: {responseContent}");
            
                try {
                    ativos = await response.Content.ReadFromJsonAsync<List<AtivoFinanceiroDTO>>() ?? new();
                    Console.WriteLine($"[DEBUG] Ativos recebidos: {ativos.Count}");
                    Console.WriteLine($"Carregados {ativos.Count} ativos");
                }
                catch (Exception jsonEx) {
                    Console.WriteLine($"Erro ao deserializar JSON: {jsonEx.Message}");
                    ativos = new List<AtivoFinanceiroDTO>();
                }
            }
            else if (response != null)
            {
                Console.WriteLine($"Falha ao carregar ativos: {response.StatusCode}");
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Conteúdo do erro: {errorContent}");
                ativos = new List<AtivoFinanceiroDTO>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar ativos: {ex.Message}");
            ativos = new List<AtivoFinanceiroDTO>();
        }
        finally
        {
            isLoading = false;
            AplicarFiltros();
            StateHasChanged();
        }
    }

    private async Task CreateAtivoFinanceiro()
    {
        try
        {
            var response = await HttpService.SendAuthorizedRequestAsync(
                HttpMethod.Post, 
                "api/AtivoFinanceiro/novo", 
                NovoAtivo);

            if (response != null && response.IsSuccessStatusCode)
            {
                CloseModal();
                await JS.InvokeVoidAsync("alert", "Ativo criado com sucesso!");
                // Assegure-se de que isso seja chamado DEPOIS do alerta
                await LoadAtivos();
            }
            else if (response != null)
            {
                var error = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Erro: {error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Erro ao criar ativo: {ex.Message}");
        }
    }
    

    private async Task DeleteAtivoFinanceiro(Guid id)
    {
        bool confirm = await JS.InvokeAsync<bool>("confirm",
            "Tem certeza que deseja excluir este ativo? Esta ação não pode ser desfeita.");

        if (!confirm) return;

        try
        {
            var response = await HttpService.SendAuthorizedRequestAsync(
                HttpMethod.Delete, 
                $"api/AtivoFinanceiro/{id}");

            if (response != null && response.IsSuccessStatusCode)
            {
                await LoadAtivos();
                await JS.InvokeVoidAsync("alert", "Ativo excluído com sucesso!");
            }
            else if (response != null)
            {
                var error = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Erro: {error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Erro ao excluir ativo: {ex.Message}");
        }
    }

    private void ShowDetails(Guid id)
    {
        Navigation.NavigateTo($"/ativos/detalhes/{id}");
    }

    private AtivoFinanceiroDTO AtivoEmEdicao;
    private bool showEditModal = false;

    private async Task EditarAtivo(Guid id)
    {
        var response = await Http.GetFromJsonAsync<AtivoFinanceiroDTO>($"api/AtivoFinanceiro/{id}");
        if (response != null)
        {
            AtivoEmEdicao = response;
            showEditModal = true;
        }
    }
    
    private async Task GuardarEdicaoAsync()
    {
        var response = await Http.PutAsJsonAsync($"api/AtivoFinanceiro/{AtivoEmEdicao.Id}", AtivoEmEdicao);
        if (response.IsSuccessStatusCode)
        {
            showEditModal = false;
            await LoadAtivos();
        }
        else
        {
            var erro = await response.Content.ReadAsStringAsync();
            Console.Error.WriteLine("Erro ao editar: " + erro);
            await JS.InvokeVoidAsync("alert", "Erro ao editar ativo.");
        }
    }



    private void OpenCreateModal() => showCreateModal = true;

    private void CloseModal()
    {
        showCreateModal = false;
        NovoAtivo = new AtivoFinanceiroNovoDTO
        {
            Deposito = new DepositoPrazoDTO { Titulares = "Titular Principal" },
            Fundo = new FundoInvestimentoDTO(),
            Imovel = new ImovelArrendadoDTO(),
            DataInicio = DateTime.Today
        };
    }

    private string GetTipoAtivoDisplay(TipoAtivoFinanceiro tipo)
    {
        return tipo switch
        {
            TipoAtivoFinanceiro.DepositoPrazo => "Depósito a Prazo",
            TipoAtivoFinanceiro.FundoInvestimento => "Fundo de Investimento",
            TipoAtivoFinanceiro.ImovelArrendado => "Imóvel Arrendado",
            _ => "Desconhecido"
        };
    }

    private string GetValorAtivo(AtivoFinanceiroDTO ativo)
    {
        var culture = CultureInfo.GetCultureInfo("en");
        var percentualImposto = Math.Clamp(ativo.Imposto, 0, 100) / 100;

        return ativo.Tipo switch
        {
            TipoAtivoFinanceiro.DepositoPrazo when ativo.DepositoPrazo != null =>
                $"Bruto: {ativo.DepositoPrazo.ValorInicial.ToString("C2", culture)} | " +
                $"Líquido: {(ativo.DepositoPrazo.ValorInicial * (1 - percentualImposto)).ToString("C2", culture)}",

            TipoAtivoFinanceiro.FundoInvestimento when ativo.FundoInvestimento != null =>
                $"Montante: {ativo.FundoInvestimento.MontanteInvestido.ToString("C2", culture)}",

            TipoAtivoFinanceiro.ImovelArrendado when ativo.ImovelArrendado != null =>
                $"Valor: {ativo.ImovelArrendado.ValorImovel.ToString("C2", culture)} | " +
                $"Renda: {(ativo.ImovelArrendado.ValorRenda?.ToString("C2", culture) ?? "N/A")}/mês",

            _ => "Valor não disponível"
        };
    }
}