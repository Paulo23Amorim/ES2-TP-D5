@page "/novo/ativo"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using System.Net.Http.Json
@using Projeto_ES2.Client.Components.DTOs

<h3 class="text-xl font-bold mb-4">Novo Ativo Financeiro</h3>

@if (!string.IsNullOrEmpty(mensagemErro))
{
    <div class="alert alert-danger mb-4">@mensagemErro</div>
}

<AtivoForm Ativo="@Ativo"
           BotaoTexto="Salvar"
           OnSubmit="@CriarAtivo"
           ReturnUrl="/ativos" />

@code {

    private AtivoFinanceiroNovoDTO Ativo = new()
    {
        Nome = "",
        Tipo = default, // Não define tipo inicial para evitar mostrar os campos
        DataInicio = DateTime.Today,
        DataFim = DateTime.Today.AddYears(1),
        Imposto = 0,
        Deposito = new(),
        Fundo = new(),
        Imovel = new()
    };

    private string mensagemErro = string.Empty;

    private async Task CriarAtivo(AtivoFinanceiroNovoDTO ativo)
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/AtivoFinanceiro/novo", ativo);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Ativo criado com sucesso!");

                // Opção 1: full-reload
                Navigation.NavigateTo("/ativos", forceLoad: true);

                // OU, Opção 2: rota “diferente” para re-executar OnInitializedAsync
                // Navigation.NavigateTo($"/ativos?refresh={DateTime.Now.Ticks}");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                mensagemErro = $"Erro ao salvar ativo: {error}";
                await JS.InvokeVoidAsync("console.error", mensagemErro);
            }
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro: {ex.Message}";
            await JS.InvokeVoidAsync("console.error", ex);
        }
    }

}
