@page "/login"
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using Projeto_ES2.Client.Components.DTOs
@using Projeto_ES2.Client.Components.Models
@using Projeto_ES2.Client.Services
@inject NavigationManager Navigation
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider

<h3 class="text-xl font-bold mb-4">Login</h3>

@if (!string.IsNullOrEmpty(loginError))
{
    <div class="alert alert-danger">@loginError</div>
}

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Email:</label>
        <InputText @bind-Value="loginModel.Email" class="form-control" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Password:</label>
        <InputText type="password" @bind-Value="loginModel.Password" class="form-control" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Entrar</button>
</EditForm>

<p class="mt-3">Ainda não tens conta? <a href="/register">Regista-te aqui</a></p>

@code {
    private LoginModel loginModel = new();
    private string loginError = string.Empty;

    private async Task HandleLogin()
    {
        loginError = string.Empty;

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", new {
                Email = loginModel.Email,
                Password = loginModel.Password
            });

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                
                // Remove possíveis aspas que vieram no token
                await LocalStorage.SetItemAsync("authToken", result.Token);



                await LocalStorage.SetItemAsync("user", result.User);
                
                // Atualiza o estado de autenticação
                ((CustomAuthStateProvider)AuthStateProvider).NotifyUserAuthentication(result.Token);
                
                Navigation.NavigateTo("/ativos");

            }
            else
            {
                loginError = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            loginError = "Erro na ligação com o servidor";
            Console.WriteLine("Erro no login: " + ex.Message);
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "O email é obrigatório")]
        [EmailAddress(ErrorMessage = "Email inválido")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "A password é obrigatória")]
        [MinLength(6, ErrorMessage = "A password deve ter pelo menos 6 caracteres")]
        public string Password { get; set; } = string.Empty;
    }

    public class LoginResponse
    {
        public string Token { get; set; }
        public UserDTO User { get; set; }
    }
}