@page "/gerir-utilizadores"
@inject HttpClient Http
@inject NavigationManager Navigation
@using Projeto_ES2.Client.Components.Models
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin,UserManager")]

<h3>Gestão de Utilizadores</h3>

@if (utilizadores == null)
{
    <p><em>A carregar utilizadores...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Nome</th>
            <th>Email</th>
            <th>Tipo</th>
            <th>Ações</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var u in utilizadores)
        {
            <tr>
                <td>@u.nome</td>
                <td>@u.email</td>
                <td>@u.TipoUtilizador</td>
                <td>
                    <button class="btn btn-sm btn-danger" @onclick="@(() => ApagarUtilizador(u.user_id))">
                        Apagar
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<Utilizador>? utilizadores;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            utilizadores = await Http.GetFromJsonAsync<List<Utilizador>>("api/Utilizadores");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erro ao carregar utilizadores: {ex.Message}");
        }
    }

    private async Task ApagarUtilizador(Guid id)
    {
        var confirmar = await JSRuntime.InvokeAsync<bool>(
            "confirm",
            new object[] { "Tem a certeza que quer apagar este utilizador?" }
        );

        if (!confirmar) return;

        var response = await Http.DeleteAsync($"api/Utilizadores/{id}");
        if (response.IsSuccessStatusCode)
        {
            utilizadores = utilizadores!.Where(u => u.user_id != id).ToList();
        }
        else
        {
            Console.Error.WriteLine("Erro ao apagar utilizador.");
        }
    }
}