@page "/ativos/novo"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation
@using Projeto_ES2.Components.Models
@using System.Net.Http.Json

<h3 class="text-xl font-bold mb-4">Novo Ativo Financeiro</h3>

@if (!string.IsNullOrEmpty(mensagemErro))
{
    <div class="alert alert-danger">@mensagemErro</div>
}

<AtivoForm Ativo="@Ativo"
           BotaoTexto="Salvar"
           OnValidSubmit="@CriarAtivo"
           CancelarCallback="@Cancelar" />

@code {
    private AtivoFinanceiro Ativo = new()
    {
        Nome = "",
        Tipo = TipoAtivoFinanceiro.DepositoPrazo,
        DataInicio = DateTime.Today,
        DataFim = DateTime.Today.AddYears(1),
        Imposto = 0
    };
    
    private string mensagemErro = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var utilizadorId = await ObterUtilizadorAutenticado();
        if (utilizadorId == null)
        {
            mensagemErro = "Utilizador não autenticado.";
            return;
        }

        Ativo.UtilizadorId = utilizadorId.Value;
    }

    private async Task<Guid?> ObterUtilizadorAutenticado()
    {
        var idString = await JS.InvokeAsync<string>("localStorage.getItem", "utilizadorId");
        if (Guid.TryParse(idString, out var id))
            return id;
        return null;
    }

    private async Task CriarAtivo()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Ativos", Ativo);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/ativos");
            }
            else
            {
                mensagemErro = "Erro ao salvar ativo.";
            }
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro: {ex.Message}";
        }
    }

    private Task Cancelar()
    {
        Navigation.NavigateTo("/ativos");
        return Task.CompletedTask;
    }
}