@page "/ativos/editar/{Id:guid}"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using Projeto_ES2.Components.DTOs
@using Projeto_ES2.Components.Models
@using System.Net.Http.Json

<h3 class="text-xl font-bold mb-4">Editar Ativo Financeiro</h3>

@if (carregando)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Carregando...</span>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(mensagemErro))
{
    <div class="alert alert-danger mb-4">@mensagemErro</div>
}
else if (Ativo != null)
{
    <AtivoForm Ativo="@Ativo"
               BotaoTexto="Atualizar"
               OnSubmit="@AtualizarAtivo"
               ReturnUrl="/ativos" />
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private AtivoFinanceiroNovoDTO Ativo;
    private string mensagemErro = string.Empty;
    private bool carregando = true;

    protected override async Task OnInitializedAsync()
    {
        await CarregarAtivo();
    }

    private async Task CarregarAtivo()
    {
        try
        {
            var ativo = await Http.GetFromJsonAsync<AtivoFinanceiroDTO>($"api/AtivoFinanceiro/{Id}");
            
            // Converter DTO para NovoDTO (para edição)
            Ativo = new AtivoFinanceiroNovoDTO
            {
                Nome = ativo.Nome,
                Tipo = Enum.Parse<TipoAtivoFinanceiro>(ativo.Tipo),
                DataInicio = ativo.DataInicio,
                DataFim = ativo.DataFim,
                Imposto = ativo.Imposto
            };

            // Carregar dados específicos de acordo com o tipo
            if (Ativo.Tipo == TipoAtivoFinanceiro.DepositoPrazo)
            {
                var deposito = await Http.GetFromJsonAsync<DepositoPrazo>($"api/DepositoPrazo/{Id}");
                Ativo.Deposito = new DepositoPrazoDTO
                {
                    ValorInicial = deposito.ValorInicial,
                    Banco = deposito.Banco,
                    NumeroConta = deposito.NumeroConta,
                    Titulares = deposito.Titulares,
                    TaxaJuroAnual = deposito.TaxaJuroAnual
                };
            }
            else if (Ativo.Tipo == TipoAtivoFinanceiro.FundoInvestimento)
            {
                var fundo = await Http.GetFromJsonAsync<FundoInvestimento>($"api/FundoInvestimento/{Id}");
                Ativo.Fundo = new FundoInvestimentoDTO
                {
                    Montante = fundo.MontanteInvestido,
                    TaxaJuroPadrao = fundo.TaxaJuroPadrao
                };
            }
            else if (Ativo.Tipo == TipoAtivoFinanceiro.ImovelArrendado)
            {
                var imovel = await Http.GetFromJsonAsync<ImovelArrendado>($"api/ImovelArrendado/{Id}");
                Ativo.Imovel = new ImovelArrendadoDTO
                {
                    Localizacao = imovel.Localizacao,
                    Valor = imovel.ValorImovel,
                    Renda = imovel.ValorRenda ?? 0,
                    Condominio = imovel.ValorCondominio ?? 0,
                    Despesas = imovel.DespesasAnuais ?? 0
                };
            }
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro ao carregar ativo: {ex.Message}";
            await JS.InvokeVoidAsync("console.error", ex);
        }
        finally
        {
            carregando = false;
        }
    }

    private async Task AtualizarAtivo(AtivoFinanceiroNovoDTO ativo)
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/AtivoFinanceiro/{Id}", ativo);
            
            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Ativo atualizado com sucesso!");
                Navigation.NavigateTo("/ativos");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                mensagemErro = $"Erro ao atualizar ativo: {error}";
                await JS.InvokeVoidAsync("console.error", mensagemErro);
            }
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro: {ex.Message}";
            await JS.InvokeVoidAsync("console.error", ex);
        }
    }
}