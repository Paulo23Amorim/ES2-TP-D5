@page "/login"
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JS
@inject ILocalStorageService LocalStorage
@using Microsoft.AspNetCore.Authorization
@using Projeto_ES2.Components.Models
<h3 class="text-xl font-bold mb-4">Login</h3>

@if (!string.IsNullOrEmpty(loginError))
{
    <div class="alert alert-danger">@loginError</div>
}

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-2">
        <label>Email:</label>
        <InputText @bind-Value="loginModel.Email" class="form-control" />
    </div>

    <div class="mb-2">
        <label>Password:</label>
        <InputText @bind-Value="loginModel.Password" type="password" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Entrar</button>
</EditForm>

<p class="mt-3">Ainda não tens conta? <a href="/register">Regista-te aqui</a></p>

@code {
    private LoginModel loginModel = new();
    private string loginError = string.Empty;

    private async Task HandleLogin()
    {
        loginError = string.Empty;

        try
        {
            var response = await Http.PostAsJsonAsync("api/Auth/login", new {
                Email = loginModel.Email,
                Password = loginModel.Password
            });

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                await LocalStorage.SetItemAsync("authToken", result.Token);
                await LocalStorage.SetItemAsync("user", result.User);
                
                Navigation.NavigateTo("/");
            }
            else
            {
                loginError = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            loginError = "Erro na ligação com o servidor";
            Console.WriteLine("Erro no login: " + ex.Message);
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "O email é obrigatório")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "A password é obrigatória")]
        public string Password { get; set; } = string.Empty;
    }

    private class LoginResponse
    {
        public string Token { get; set; }
        public UserInfo User { get; set; }
    }

    private class UserInfo
    {
        public Guid Id { get; set; }
        public string Nome { get; set; }
        public string Email { get; set; }
        public TipoUtilizador Tipo { get; set; }
    }
}